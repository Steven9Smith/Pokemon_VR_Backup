<#/*THIS IS A T4 FILE - see t4_text_templating.md for what it is and how to run codegen*/#>
<#@ template debug="True" #>
<#@ output extension=".gen.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Security.Cryptography" #>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     TextTransform Samples/Packages/com.unity.collections/Unity.Collections/FixedList.tt
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using Unity.Collections.LowLevel.Unsafe;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using UnityEngine.Internal;
using System.Collections;
using Unity.Mathematics;

namespace Unity.Collections
{
    struct FixedList
    {             
        [Conditional("ENABLE_UNITY_COLLECTIONS_CHECKS")]
        internal static void CheckElementAccess(int index, int Length)
        {
            if (index < 0 || index >= Length)
                throw new IndexOutOfRangeException($"Index {index} is out of range of '{Length}' Length.");
        }
        
        internal static int PaddingBytes<T>() where T : struct
        {
            return math.max(0, math.min(6, (1 << math.tzcnt(UnsafeUtility.SizeOf<T>())) - 2));
        }

        internal static int StorageBytes<BUFFER,T>() where BUFFER : struct where T : struct
        {
            return UnsafeUtility.SizeOf<BUFFER>() - PaddingBytes<T>();
        }

        internal static int Capacity<BUFFER,T>() where BUFFER : struct where T : struct
        {
            return StorageBytes<BUFFER,T>() / UnsafeUtility.SizeOf<T>();
        }

        [Conditional("ENABLE_UNITY_COLLECTIONS_CHECKS")]
        internal static void CheckResize<BUFFER,T>(int newLength) where BUFFER : struct where T : struct
        {
            var Capacity = Capacity<BUFFER,T>();
            if (newLength < 0 || newLength > Capacity)
                throw new IndexOutOfRangeException($"NewLength {newLength} is out of range of '{Capacity}' Capacity.");
        }
    }

<#
var SIZES = new int[]{32,64,128,512,4096};
for(var size = 0; size < 5; ++size)
{
    var BYTES = SIZES[size];
    var BUFFER_BYTES = BYTES - 2;
    var TYPENAME = String.Format("FixedList{0}", BYTES); 
#>
    /// <summary>
    /// An unmanaged, resizable list that does not allocate memory. 
    /// It is <#=BYTES#> bytes in size, and contains all the memory it needs.
    /// </summary>
    [DebuggerTypeProxy(typeof(<#=TYPENAME#>DebugView<>))]
    public struct <#=TYPENAME#><T> 
    : IEnumerable<T> 
<#
    foreach(var OTHERBYTES in SIZES)
    {
        var OTHERTYPENAME = String.Format("FixedList{0}", OTHERBYTES);
        WriteLine("    , IEquatable<{0}<T>>", OTHERTYPENAME);
        WriteLine("    , IComparable<{0}<T>>", OTHERTYPENAME);
    }
#>    where T : unmanaged, IComparable<T>
    {
        internal ushort length;     
        internal FixedBytes<#=BUFFER_BYTES#> buffer;

        /// <summary>
        /// The current number of items in the list.
        /// </summary>
        /// <value>The item length.</value>
        public int Length
        {
            get => length;
            set
            {
                FixedList.CheckResize<FixedBytes<#=BUFFER_BYTES#>,T>(value);
                length = (ushort)value;
            }
        }

        internal int LengthInBytes => Length * UnsafeUtility.SizeOf<T>();

        unsafe internal byte* Buffer 
        {
            get 
            {
                fixed(byte* b = &buffer.offset0000.byte0000)
                    return b + FixedList.PaddingBytes<T>();
            }
        } 

        /// <summary>
        /// The number of items that can fit in the list.
        /// </summary>
        /// <value>The number of items that the list can hold.</value>
        /// <remarks>Capacity specifies the number of items the list can currently hold. You can not change Capacity
        /// to fit more or fewer items.</remarks>
        public int Capacity => FixedList.Capacity<FixedBytes<#=BUFFER_BYTES#>,T>();

        /// <summary>
        /// Retrieve a member of the list by index.
        /// </summary>
        /// <param name="index">The zero-based index into the list.</param>
        /// <value>The list item at the specified index.</value>
        /// <exception cref="IndexOutOfRangeException">Thrown if index is negative or >= to <see cref="Length"/>.</exception>
        public ref T this[int index]
        {
            get
            {
                FixedList.CheckElementAccess(index, length);
                unsafe
                {
                    return ref UnsafeUtilityEx.ArrayElementAsRef<T>(Buffer, index);
                }
            }
        }

        /// <summary>
        /// Computes a hash code summary of the <#=TYPENAME#><T>.
        /// </summary>
        public override int GetHashCode()
        {
            unsafe 
            {
                return (int)CollectionHelper.Hash(Buffer, LengthInBytes);
            }
        }
                        
        /// <summary>
        /// Adds an element to the list.
        /// </summary>
        /// <param name="element">The T to be added at the end of the list.</param>
        /// <exception cref="IndexOutOfRangeException">Thrown if list is already full. See <see cref="Capacity"/>.</exception>        
        public void Add(in T item)
        {
            this[Length++] = item;
        }

        /// <summary>
        /// Adds an element to the list.
        /// </summary>
        /// <param name="element">The T to be added at the end of the list.</param>
        /// <exception cref="IndexOutOfRangeException">Thrown if list is already full. See <see cref="Capacity"/>.</exception>        
        public void AddNoResize(in T item)
        {
            this[Length++] = item;
        }
                
        /// <summary>
        /// Clears the list.
        /// </summary>
        public void Clear()
        {
            Length = 0;
        }
    
        /// <summary>
        /// Determines whether an element is in the <#=TYPENAME#><T>.
        /// </summary>
        /// <param name="item">The object to locate in the <#=TYPENAME#><T>.</param>
        public bool Contains(in T item)
        {
            return IndexOf(item) >= 0;
        }

        /// <summary>
        /// Searches for the specified T and returns the zero-based index of the first occurrence within the 
        /// range of elements in the <#=TYPENAME#><T> that starts at the specified index and contains the specified 
        /// number of elements.
        /// </summary>
        /// <param name="item">The T to locate in the <#=TYPENAME#><T>.</param> 
        /// <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param> 
        /// <param name="count">The number of elements in the section to search.</param>
        public int IndexOf(in T item, int index, int count)
        {
            for(var i = index; i < index + count; ++i)
                if(this[i].Equals(item))
                  return i;
            return -1;            
        }

        /// <summary>
        /// Searches for the specified T and returns the zero-based index of the first occurrence within the 
        /// range of elements in the <#=TYPENAME#><T> that starts at the specified index.
        /// </summary>
        /// <param name="item">The T to locate in the <#=TYPENAME#><T>.</param> 
        /// <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param> 
        public int IndexOf(in T item, int index)
        {
            return IndexOf(item, index, Length - index);
        }
        
        /// <summary>
        /// Searches for the specified T and returns the zero-based index of the first occurrence within the entire <#=TYPENAME#>.
        /// </summary>
        /// <param name="item">The T to locate in the <#=TYPENAME#><T>.</param>
        public int IndexOf(T item)
        {
            return IndexOf(item, 0, Length);
        }
                                
        /// <summary>
        /// Inserts a number of items into a <#=TYPENAME#><T> at a specified zero-based index.
        /// </summary>
        /// <param name="begin">The zero-based index at which the new elements should be inserted.</param>
        /// <param name="items">The number of items to insert</param>                                
        public void InsertRange(int begin, int items)
        {
            if(items < 1)
                return;
            int itemsToCopy = length - begin;
            Length += items;
            if(itemsToCopy < 1)
                return;
            int bytesToCopy = itemsToCopy * UnsafeUtility.SizeOf<T>();
            int end = begin + items;
            unsafe
            {
                byte *b = Buffer;
                byte *dest = b + end * UnsafeUtility.SizeOf<T>();
                byte *src = b + begin * UnsafeUtility.SizeOf<T>();
                UnsafeUtility.MemMove(dest, src, bytesToCopy);
            }
        }
                
        /// <summary>
        /// Removes an element from the <#=TYPENAME#><T> at the specified index and replaces it with the last element,
        /// which can be much faster than copying down all subsequent elements.
        /// </summary>
        /// <param name="index">The zero-based index of the elements to remove.</param>
        public void RemoveAtSwapBack(int index)
        {
            this[index] = this[Length-1];
            --Length;
        }

        /// <summary>
        /// Removes the first occurrence of an item from the <#=TYPENAME#><T> and replaces it with the last element,
        /// which can be much faster than copying down all subsequent elements.
        /// </summary>
        /// <param name="item">The elements to remove from the <#=TYPENAME#><T>.</param>
        public void RemoveSwapBack(in T item)
        {
            var index = IndexOf(item);
            if(index == -1)
                return;
            RemoveAtSwapBack(index);
        }
                
        /// <summary>
        /// Removes a number of elements from a <#=TYPENAME#><T> at a specified zero-based index.
        /// </summary>
        /// <param name="begin">The zero-based index at which the elements should be removed.</param>
        /// <param name="items">The number of elements to remove</param>                                
        public void RemoveRange(int begin, int items)
        {
            if(items < 1)
                return;
            int itemsToCopy = length - (begin + items);
            Length -= items;
            if(itemsToCopy < 1)
                return;
            int bytesToCopy = itemsToCopy * UnsafeUtility.SizeOf<T>();
            int end = begin + items;
            unsafe
            { 
                byte*b = Buffer;
                byte *dest = b + begin * UnsafeUtility.SizeOf<T>();
                byte *src = b + end * UnsafeUtility.SizeOf<T>();
                UnsafeUtility.MemCpy(dest, src, bytesToCopy);
            }
        }

        /// <summary>
        /// Inserts a single element into a <#=TYPENAME#><T> at a specified zero-based index.
        /// </summary>
        /// <param name="index">The zero-based index at which the new element should be inserted.</param>
        /// <param name="item">The element to insert</param>                                
        public void Insert(int index, in T item)
        {
            InsertRange(index, index+1);
            this[index] = item;            
        }

        /// <summary>
        /// Searches for the specified T from the begining of the <#=TYPENAME#><T> forward, removes it if possible,
        /// and returns true if the T was successfully removed.
        /// </summary>
        /// <param name="item">The T to locate in the <#=TYPENAME#><T></param> 
        public bool Remove(in T item)
        {
            int index = IndexOf(item);
            if(index < 0)
                return false;
            RemoveRange(index, index+1);
            return true;
        }
        
        /// <summary>
        /// Removes the T at the specified index, and copies all subsequent elements backward to fill the
        /// hole so created.
        /// </summary>
        /// <param name="index">The zero-based index at which to remove the T</param> 
        public void RemoveAt(int index)
        {
            RemoveRange(index, 1);
        }
        
        /// <summary>
        /// Creates a managed Array of T that is a copy of this <#=TYPENAME#><T>.
        /// </summary>
        public T[] ToArray()
        {
            var result = new T[Length];
            unsafe
            {
                byte* s = Buffer;
                fixed(T* d = result)
                    UnsafeUtility.MemCpy(d, s, LengthInBytes);
            }
            return result;
        }

        /// <summary>
        /// Creates an unmanaged NativeArray<T> that is a copy of this <#=TYPENAME#><T>.
        /// </summary>
        public NativeArray<T> ToNativeArray(Allocator allocator)
        {
            unsafe
            {
                byte* s = Buffer;
                var copy = NativeArrayUnsafeUtility.ConvertExistingDataToNativeArray<T>(s, Length, Allocator.Invalid);        
                return new NativeArray<T>(copy, allocator);
            }
        }
        
        /// <summary>
        /// Sorts the elements in this <#=TYPENAME#><T>.
        /// </summary>
        public void Sort()
        {
            unsafe
            {
                NativeSortExtension.Sort((T*)Buffer, length);
            }
        }
<#        
    foreach(var OTHERBYTES in SIZES)
    {
        var OTHER_BUFFER_BYTES = OTHERBYTES - 2;
        var OTHERTYPENAME = String.Format("FixedList{0}", OTHERBYTES);    
#>

        /// <summary>
        /// Determines whether a <#=TYPENAME#><T> and <#=OTHERTYPENAME#><T> have the same value.
        /// </summary>
        /// <param name="a">The <#=TYPENAME#><T> to compare for equality</param> 
        /// <param name="b">The <#=OTHERTYPENAME#><T> to compare for equality</param> 
        public static bool operator ==(in <#=TYPENAME#><T> a, in <#=OTHERTYPENAME#><T> b)
        {
            unsafe
            {
                if(a.length != b.length)
                    return false;
                return UnsafeUtility.MemCmp(a.Buffer, b.Buffer, a.LengthInBytes) == 0;
            }
        }
        
        /// <summary>
        /// Determines whether a <#=TYPENAME#><T> and <#=OTHERTYPENAME#><T> have different values.
        /// </summary>
        /// <param name="a">The <#=TYPENAME#><T> to compare for inequality</param> 
        /// <param name="b">The <#=OTHERTYPENAME#><T> to compare for inequality</param> 
        public static bool operator !=(in <#=TYPENAME#><T> a, in <#=OTHERTYPENAME#><T> b)
        {
            return !(a == b);
        }

        /// <summary>
        /// Compares this instance with a specified <#=OTHERTYPENAME#><T> and indicates whether this instance 
        /// precedes, follows, or appears in the same position in the sort order as the specified <#=OTHERTYPENAME#><T>.
        /// </summary>
        /// <param name="other">The specified <#=OTHERTYPENAME#><T> to compare with</param>
        public int CompareTo(<#=OTHERTYPENAME#><T> other)       
        {
            unsafe
            {
                var mini = math.min(Length, other.Length);
                for(var i = 0; i < mini; ++i)
                {
                    var j = this[i].CompareTo(other[i]);
                    if(j != 0)
                        return j;
                }
                return Length.CompareTo(other.Length);
            }
        }
        
        /// <summary>
        /// Compares this instance with a specified <#=OTHERTYPENAME#><T> and indicates whether this instance 
        /// is equal to the specified <#=OTHERTYPENAME#><T>.
        /// </summary>
        /// <param name="other">The specified <#=OTHERTYPENAME#><T> to compare with for equality</param>
        public bool Equals(<#=OTHERTYPENAME#><T> other)
        {
            return CompareTo(other) == 0;
        }
        
<#
        if(BYTES != OTHERBYTES)
        {    
#>

        /// <summary>
        /// Constructs a new <#=TYPENAME#><T> that is a copy of a <#=OTHERTYPENAME#><T>.
        /// </summary>
        /// <param name="other">The <#=OTHERTYPENAME#><T> to copy</param>
        public <#=TYPENAME#>(in <#=OTHERTYPENAME#><T> other)
        {
            FixedList.CheckResize<FixedBytes<#=BUFFER_BYTES#>,T>(other.length);
            length = other.length;
            buffer = new FixedBytes<#=BUFFER_BYTES#>();
            unsafe 
            {
                UnsafeUtility.MemCpy(Buffer, other.Buffer, LengthInBytes);
            }
        }
        
        /// <summary>
        /// Implicitly converts a <#=OTHERTYPENAME#><T> to a <#=TYPENAME#><T>.
        /// </summary>
        /// <param name="other">The <#=OTHERTYPENAME#><T> to copy</param>
        public static implicit operator <#=TYPENAME#><T>(in <#=OTHERTYPENAME#><T> other)
        {
            return new <#=TYPENAME#><T>(other);
        }
<#
        }
    }
#>

        /// <summary>
        /// Compares this instance with a specified object and indicates whether this instance 
        /// is equal to the specified object.
        /// </summary>
        /// <param name="obj">The specified object to compare with for equality</param>
        public override bool Equals(object obj)
        {
<#
    foreach(var OTHERBYTES in SIZES)
    {
        var OTHERTYPENAME = String.Format("FixedList{0}", OTHERBYTES);
        WriteLine("            if(obj is {0}<T> a{0}) return Equals(a{0});", OTHERTYPENAME);
    }
#>
            return false;    
        }

        [ExcludeFromDocs]
        public struct Enumerator : IEnumerator<T>
        {
            <#=TYPENAME#><T> m_List;
            int m_Index;

            public Enumerator(ref <#=TYPENAME#><T> list)
            {
                m_List = list;
                m_Index = -1;
            }

            public void Dispose()
            {
            }

            public bool MoveNext()
            {
                m_Index++;
                return m_Index < m_List.Length;
            }

            public void Reset()
            {
                m_Index = -1;
            }

            // Let <#=TYPENAME#><T> indexer check for out of range.
            public T Current => m_List[m_Index];

            object IEnumerator.Current => Current;
        }

        public Enumerator GetEnumerator()
        {
            return new Enumerator(ref this);
        }

        IEnumerator IEnumerable.GetEnumerator() { throw new NotImplementedException(); }
        IEnumerator<T> IEnumerable<T>.GetEnumerator() { throw new NotImplementedException(); }
    }

    sealed class <#=TYPENAME#>DebugView<T> where T : unmanaged, IComparable<T>
    {
        <#=TYPENAME#><T> m_List;
        public <#=TYPENAME#>DebugView(<#=TYPENAME#><T> list)
        {
            m_List = list;
        }
        public T[] Items => m_List.ToArray();
    }
<#
}
#>

<#
var TYPES = new string[]{"byte","int","float"};
var TYPESIZES = new int[]{1,4,4};
for(var type = 0; type < 3; ++type)
for(var size = 0; size < 5; ++size)
{
    var BYTES = SIZES[size];
    var TYPE = TYPES[type];
    var TYPESIZE = TYPESIZES[type];
    var BUFFER_BYTES = BYTES - 2;
    var TYPENAME = String.Format("FixedList{0}{1}", new CultureInfo("en-US").TextInfo.ToTitleCase(TYPE), BYTES);
#>

    /// <summary>
    /// An unmanaged, resizable list of <#=TYPE#> that does not allocate memory. 
    /// It is <#=BYTES#> bytes in size, and contains all the memory it needs.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size=<#=BYTES#>)]
    [DebuggerTypeProxy(typeof(<#=TYPENAME#>DebugView))]
    public struct <#=TYPENAME#> 
    : IEnumerable<<#=TYPE#>>
<#
    foreach(var OTHERBYTES in SIZES)
    {
        var OTHERTYPENAME = String.Format("FixedList{0}{1}", new CultureInfo("en-US").TextInfo.ToTitleCase(TYPE), OTHERBYTES);
        WriteLine("    , IEquatable<{0}>", OTHERTYPENAME);
        WriteLine("    , IComparable<{0}>", OTHERTYPENAME);
    }
#>    
    {
        [FieldOffset(0)] internal ushort length;     
        [FieldOffset(2)] internal FixedBytes<#=BUFFER_BYTES#> buffer;   

        /// <summary>
        /// The current number of items in the list.
        /// </summary>
        /// <value>The item length.</value>
        public int Length
        {
            get => length;
            set
            {
                FixedList.CheckResize<FixedBytes<#=BUFFER_BYTES#>,<#=TYPE#>>(value);
                length = (ushort)value;
            }
        }

        internal int LengthInBytes => Length * sizeof(<#=TYPE#>);

        unsafe internal byte* Buffer 
        {
            get 
            {
                fixed(byte* b = &buffer.offset0000.byte0000)
                    return b + FixedList.PaddingBytes<<#=TYPE#>>();
            }
        } 

        /// <summary>
        /// The number of items that can fit in the list.
        /// </summary>
        /// <value>The number of items that the list can hold.</value>
        /// <remarks>Capacity specifies the number of items the list can currently hold. You can not change Capacity
        /// to fit more or fewer items.</remarks>
        public int Capacity => FixedList.Capacity<FixedBytes<#=BUFFER_BYTES#>, <#=TYPE#>>();

        /// <summary>
        /// Retrieve a member of the list by index.
        /// </summary>
        /// <param name="index">The zero-based index into the list.</param>
        /// <value>The list item at the specified index.</value>
        /// <exception cref="IndexOutOfRangeException">Thrown if index is negative or >= to <see cref="Length"/>.</exception>
        public <#=TYPE#> this[int index]
        {
            get
            {
                FixedList.CheckElementAccess(index, length);
                unsafe
                {
                    return UnsafeUtility.ReadArrayElement<<#=TYPE#>>(Buffer, index);
                }
            }
            set
            {
                FixedList.CheckElementAccess(index, length);
                unsafe
                {
                    UnsafeUtility.WriteArrayElement<<#=TYPE#>>(Buffer, index, value);
                }
            }
        }

        /// <summary>
        /// Computes a hash code summary of the <#=TYPENAME#>.
        /// </summary>
        public override int GetHashCode()
        {
            unsafe 
            {
                return (int)CollectionHelper.Hash(Buffer, LengthInBytes);
            }
        }
                        
        /// <summary>
        /// Adds an element to the list.
        /// </summary>
        /// <param name="element">The <#=TYPE#> to be added at the end of the list.</param>
        /// <exception cref="IndexOutOfRangeException">Thrown if list is already full. See <see cref="Capacity"/>.</exception>        
        public void Add(<#=TYPE#> item)
        {
            this[Length++] = item;
        }

        /// <summary>
        /// Adds an element to the list.
        /// </summary>
        /// <param name="element">The <#=TYPE#> to be added at the end of the list.</param>
        /// <exception cref="IndexOutOfRangeException">Thrown if list is already full. See <see cref="Capacity"/>.</exception>        
        public void AddNoResize(<#=TYPE#> item)
        {
            this[Length++] = item;
        }
                
        /// <summary>
        /// Clears the list.
        /// </summary>
        public void Clear()
        {
            Length = 0;
        }
    
        /// <summary>
        /// Determines whether an element is in the <#=TYPENAME#>.
        /// </summary>
        /// <param name="item">The object to locate in the <#=TYPENAME#>.</param>
        public bool Contains(<#=TYPE#> item)
        {
            return IndexOf(item) >= 0;
        }

        /// <summary>
        /// Searches for the specified <#=TYPE#> and returns the zero-based index of the first occurrence within the 
        /// range of elements in the <#=TYPENAME#> that starts at the specified index and contains the specified 
        /// number of elements.
        /// </summary>
        /// <param name="item">The <#=TYPE#> to locate in the <#=TYPENAME#>.</param> 
        /// <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param> 
        /// <param name="count">The number of elements in the section to search.</param>
        public int IndexOf(<#=TYPE#> item, int index, int count)
        {
            for(var i = index; i < index + count; ++i)
                if(this[i].Equals(item))
                  return i;
            return -1;            
        }

        /// <summary>
        /// Searches for the specified <#=TYPE#> and returns the zero-based index of the first occurrence within the 
        /// range of elements in the <#=TYPENAME#> that starts at the specified index.
        /// </summary>
        /// <param name="item">The <#=TYPE#> to locate in the <#=TYPENAME#>.</param> 
        /// <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param> 
        public int IndexOf(<#=TYPE#> item, int index)
        {
            return IndexOf(item, index, Length - index);
        }
        
        /// <summary>
        /// Searches for the specified <#=TYPE#> and returns the zero-based index of the first occurrence within the entire <#=TYPENAME#>.
        /// </summary>
        /// <param name="item">The <#=TYPE#> to locate in the <#=TYPENAME#>.</param>
        public int IndexOf(<#=TYPE#> item)
        {
            return IndexOf(item, 0, Length);
        }
                                
        /// <summary>
        /// Inserts a number of items into a <#=TYPENAME#> at a specified zero-based index.
        /// </summary>
        /// <param name="begin">The zero-based index at which the new elements should be inserted.</param>
        /// <param name="items">The number of items to insert</param>                                
        public void InsertRange(int begin, int items)
        {
            if(items < 1)
                return;
            int itemsToCopy = length - begin;
            Length += items;
            if(itemsToCopy < 1)
                return;
            int bytesToCopy = itemsToCopy * sizeof(<#=TYPE#>);
            int end = begin + items;
            unsafe
            {
                byte* b = Buffer;
                byte *dest = b + end * sizeof(<#=TYPE#>);
                byte *src = b + begin * sizeof(<#=TYPE#>);
                UnsafeUtility.MemMove(dest, src, bytesToCopy);
            }
        }
                
        /// <summary>
        /// Removes an element from the <#=TYPENAME#> at the specified index and replaces it with the last element,
        /// which can be much faster than copying down all subsequent elements.
        /// </summary>
        /// <param name="index">The zero-based index of the elements to remove.</param>
        public void RemoveAtSwapBack(int index)
        {
            this[index] = this[Length-1];
            --Length;
        }

        /// <summary>
        /// Removes the first occurrence of an item from the <#=TYPENAME#> and replaces it with the last element,
        /// which can be much faster than copying down all subsequent elements.
        /// </summary>
        /// <param name="item">The elements to remove from the <#=TYPENAME#>.</param>
        public void RemoveSwapBack(<#=TYPE#> item)
        {
            var index = IndexOf(item);
            if(index == -1)
                return;
            RemoveAtSwapBack(index);
        }
                
        /// <summary>
        /// Removes a number of elements from a <#=TYPENAME#> at a specified zero-based index.
        /// </summary>
        /// <param name="begin">The zero-based index at which the elements should be removed.</param>
        /// <param name="items">The number of elements to remove</param>                                
        public void RemoveRange(int begin, int items)
        {
            if(items < 1)
                return;
            int itemsToCopy = length - (begin + items);
            Length -= items;
            if(itemsToCopy < 1)
                return;
            int bytesToCopy = itemsToCopy * sizeof(<#=TYPE#>);
            int end = begin + items;
            unsafe
            { 
                byte* b = Buffer;
                byte *dest = b + begin * sizeof(<#=TYPE#>);
                byte *src = b + end * sizeof(<#=TYPE#>);
                UnsafeUtility.MemCpy(dest, src, bytesToCopy);
            }
        }

        /// <summary>
        /// Inserts a single element into a <#=TYPENAME#> at a specified zero-based index.
        /// </summary>
        /// <param name="index">The zero-based index at which the new element should be inserted.</param>
        /// <param name="item">The element to insert</param>                                
        public void Insert(int index, <#=TYPE#> item)
        {
            InsertRange(index, index+1);
            this[index] = item;            
        }

        /// <summary>
        /// Searches for the specified <#=TYPE#> from the begining of the <#=TYPENAME#> forward, removes it if possible,
        /// and returns true if the <#=TYPE#> was successfully removed.
        /// </summary>
        /// <param name="item">The <#=TYPE#> to locate in the <#=TYPENAME#></param> 
        public bool Remove(<#=TYPE#> item)
        {
            int index = IndexOf(item);
            if(index < 0)
                return false;
            RemoveRange(index, index+1);
            return true;
        }
        
        /// <summary>
        /// Removes the <#=TYPE#> at the specified index, and copies all subsequent elements backward to fill the
        /// hole so created.
        /// </summary>
        /// <param name="index">The zero-based index at which to remove the <#=TYPE#></param> 
        public void RemoveAt(int index)
        {
            RemoveRange(index, 1);
        }
        
        /// <summary>
        /// Creates a managed Array of <#=TYPE#> that is a copy of this <#=TYPENAME#>.
        /// </summary>
        public <#=TYPE#>[] ToArray()
        {
            var result = new <#=TYPE#>[Length];
            unsafe
            {
                byte* s = Buffer;
                fixed(<#=TYPE#>* d = result)
                    UnsafeUtility.MemCpy(d, s, LengthInBytes);
            }
            return result;
        }

        /// <summary>
        /// Creates an unmanaged NativeArray<#=TYPE#> that is a copy of this <#=TYPENAME#>.
        /// </summary>
        public NativeArray<<#=TYPE#>> ToNativeArray(Allocator allocator)
        {
            unsafe
            {
                byte* s = Buffer;
                var copy = NativeArrayUnsafeUtility.ConvertExistingDataToNativeArray<<#=TYPE#>>(s, Length, Allocator.Invalid);        
                return new NativeArray<<#=TYPE#>>(copy, allocator);
            }
        }
        
        /// <summary>
        /// Sorts the elements in this <#=TYPENAME#>.
        /// </summary>
        public void Sort()
        {
            unsafe
            {
                NativeSortExtension.Sort((<#=TYPE#>*)Buffer, length);
            }
        }
<#        
foreach(var OTHERBYTES in SIZES)
{
    var OTHER_BUFFER_BYTES = OTHERBYTES - 2;
    var OTHERTYPENAME = String.Format("FixedList{0}{1}", new CultureInfo("en-US").TextInfo.ToTitleCase(TYPE), OTHERBYTES);    
#>

        /// <summary>
        /// Determines whether a <#=TYPENAME#> and <#=OTHERTYPENAME#> have the same value.
        /// </summary>
        /// <param name="a">The <#=TYPENAME#> to compare for equality</param> 
        /// <param name="b">The <#=OTHERTYPENAME#> to compare for equality</param> 
        public static bool operator ==(in <#=TYPENAME#> a, in <#=OTHERTYPENAME#> b)
        {
            unsafe
            {
                if(a.Length != b.Length)
                    return false;
                return UnsafeUtility.MemCmp(a.Buffer, b.Buffer, a.LengthInBytes) == 0;
            }
        }
        
        /// <summary>
        /// Determines whether a <#=TYPENAME#> and <#=OTHERTYPENAME#> have different values.
        /// </summary>
        /// <param name="a">The <#=TYPENAME#> to compare for inequality</param> 
        /// <param name="b">The <#=OTHERTYPENAME#> to compare for inequality</param> 
        public static bool operator !=(in <#=TYPENAME#> a, in <#=OTHERTYPENAME#> b)
        {
            return !(a == b);
        }

        /// <summary>
        /// Compares this instance with a specified <#=OTHERTYPENAME#> and indicates whether this instance 
        /// precedes, follows, or appears in the same position in the sort order as the specified <#=OTHERTYPENAME#>.
        /// </summary>
        /// <param name="other">The specified <#=OTHERTYPENAME#> to compare with</param>
        public int CompareTo(<#=OTHERTYPENAME#> other)       
        {
            unsafe
            {
                var mini = math.min(Length, other.Length);
                for(var i = 0; i < mini; ++i)
                {
                    var j = this[i].CompareTo(other[i]);
                    if(j != 0)
                        return j;
                }
                return Length.CompareTo(other.Length);
            }
        }
        
        /// <summary>
        /// Compares this instance with a specified <#=OTHERTYPENAME#> and indicates whether this instance 
        /// is equal to the specified <#=OTHERTYPENAME#>.
        /// </summary>
        /// <param name="other">The specified <#=OTHERTYPENAME#> to compare with for equality</param>
        public bool Equals(<#=OTHERTYPENAME#> other)
        {
            return CompareTo(other) == 0;
        }
        
<#
    if(BYTES != OTHERBYTES)
    {    
#>

        /// <summary>
        /// Constructs a new <#=TYPENAME#> that is a copy of a <#=OTHERTYPENAME#>.
        /// </summary>
        /// <param name="other">The <#=OTHERTYPENAME#> to copy</param>
        public <#=TYPENAME#>(in <#=OTHERTYPENAME#> other)
        {
            FixedList.CheckResize<FixedBytes<#=BUFFER_BYTES#>,<#=TYPE#>>(other.length);
            length = other.length;
            buffer = new FixedBytes<#=BUFFER_BYTES#>();
            unsafe 
            {
                fixed(FixedBytes<#=OTHER_BUFFER_BYTES#>* s = &other.buffer)
                fixed(FixedBytes<#=BUFFER_BYTES#>* d = &this.buffer)
<#
        if(OTHERBYTES >= BYTES)
            WriteLine("                    *d = *(FixedBytes{0}*)s;", BUFFER_BYTES);
        else
            WriteLine("                    *(FixedBytes{0}*)d = *s;", OTHER_BUFFER_BYTES);
#>
            }
        }
        
        /// <summary>
        /// Implicitly converts a <#=OTHERTYPENAME#> to a <#=TYPENAME#>.
        /// </summary>
        /// <param name="other">The <#=OTHERTYPENAME#> to copy</param>
        public static implicit operator <#=TYPENAME#>(in <#=OTHERTYPENAME#> other)
        {
            return new <#=TYPENAME#>(other);
        }
<#
    }
}
#>

        /// <summary>
        /// Compares this instance with a specified object and indicates whether this instance 
        /// is equal to the specified object.
        /// </summary>
        /// <param name="obj">The specified object to compare with for equality</param>
        public override bool Equals(object obj)
        {
<#
    foreach(var OTHERBYTES in SIZES)
    {
        var OTHERTYPENAME = String.Format("FixedList{0}{1}", new CultureInfo("en-US").TextInfo.ToTitleCase(TYPE), OTHERBYTES);
        WriteLine("            if(obj is {0} a{0}) return Equals(a{0});", OTHERTYPENAME);
    }
#>
            return false;    
        }

        [ExcludeFromDocs]
        public struct Enumerator : IEnumerator<<#=TYPE#>>
        {
            <#=TYPENAME#> m_List;
            int m_Index;

            public Enumerator(ref <#=TYPENAME#> list)
            {
                m_List = list;
                m_Index = -1;
            }

            public void Dispose()
            {
            }

            public bool MoveNext()
            {
                m_Index++;
                return m_Index < m_List.Length;
            }

            public void Reset()
            {
                m_Index = -1;
            }

            // Let <#=TYPENAME#> indexer check for out of range.
            public <#=TYPE#> Current => m_List[m_Index];

            object IEnumerator.Current => Current;
        }

        public Enumerator GetEnumerator()
        {
            return new Enumerator(ref this);
        }

        IEnumerator IEnumerable.GetEnumerator() { throw new NotImplementedException(); }
        IEnumerator<<#=TYPE#>> IEnumerable<<#=TYPE#>>.GetEnumerator() { throw new NotImplementedException(); }
    }

    sealed class <#=TYPENAME#>DebugView
    {
        <#=TYPENAME#> m_List;
        public <#=TYPENAME#>DebugView(<#=TYPENAME#> list)
        {
            m_List = list;
        }
        public <#=TYPE#>[] Items => m_List.ToArray();
    }

<#
}
#>
    
}
