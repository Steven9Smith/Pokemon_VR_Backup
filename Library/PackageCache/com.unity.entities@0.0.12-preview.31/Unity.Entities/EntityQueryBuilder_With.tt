<#/*THIS IS A T4 FILE - see t4_text_templating.md for what it is and how to run codegen*/#>
<#@ assembly name="System.Collections" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".gen.cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Generated by EntityQueryBuilder_With.tt

using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;

namespace Unity.Entities
{
    public partial struct EntityQueryBuilder
    {
        // ** FLUENT QUERY **

<#
foreach (var (name, count) in new[] { ("Any", 5), ( "None", 5), ("All", 5) }) {
    for (var it = 1; it <= count; ++it) {
#>
        public EntityQueryBuilder With<#=name#><<#=Series("T{0}", it, ", ")#>>()
        {
            ValidateHasNoQuery();
<#      for (var ia = 0; ia < it; ++ia) {#>
            m_<#=name#>.Add(TypeManager.GetTypeIndex<T<#=ia#>>());
<#      }#>
            return this;
        }

<#}}#>
    }
}
<#+

// misc support utils

static string Series(string formatString, int count, string separator) =>
    string.Join(separator, Enumerable.Range(0, count).Select(i => string.Format(formatString, i)));
#>
